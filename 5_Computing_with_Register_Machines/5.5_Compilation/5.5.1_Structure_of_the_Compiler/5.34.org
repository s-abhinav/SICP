#+Title: Exercise 5.34
#+PROPERTY: header-args:scheme :session 5-34 :exports both :results ouput verbatim

#+begin_src scheme :results silent :exports none
  (add-to-load-path (dirname "./"))
  (load "../syntax.scm")
  (load "../compiler.scm")
  (use-modules (ice-9 pretty-print))
#+end_src

* Compile the iterative factorial procedure

#+begin_src scheme :results output verbatim :exports both
  (pretty-print
   (compile
    '(define (factorial n)
       (define (iter product counter)
         (if (> counter n)
             product
             (iter (* counter product)
                   (+ counter 1))))
       (iter 1 1))
    'val
    'next))
#+end_src

#+RESULTS:
#+begin_example
  ((env)
   (val)
   ((assign
      val
      (op make-compiled-procedure)
      (label entry1)
      (reg env))                                  ; compile factorial
    (goto (label after-lambda2))
    entry1
    (assign
      env
      (op compiled-procedure-env)
      (reg proc))
    (assign
      env
      (op extend-environment)
      (const (n))
      (reg argl)
      (reg env))
    (assign
      val
      (op make-compiled-procedure)
      (label entry3)
      (reg env))                                  ; compile iter
    (goto (label after-lambda4))
    entry3
    (assign
      env
      (op compiled-procedure-env)
      (reg proc))
    (assign
      env
      (op extend-environment)
      (const (product counter))
      (reg argl)
      (reg env))
    (save continue)
    (save env)
    (assign
      proc
      (op lookup-variable-value)
      (const >)
      (reg env))                                  ; setup for (> counter n)
    (assign
      val
      (op lookup-variable-value)
      (const n)
      (reg env))
    (assign argl (op list) (reg val))
    (assign
      val
      (op lookup-variable-value)
      (const counter)
      (reg env))
    (assign argl (op cons) (reg val) (reg argl))
    (test (op primitive-procedure?) (reg proc))   ; go to primitive8
    (branch (label primitive-branch8))
    compiled-branch9
    (assign continue (label after-call10))
    (assign
      val
      (op compiled-procedure-entry)
      (reg proc))
    (goto (reg val))
    primitive-branch8
    (assign
      val
      (op apply-primitive-procedure)
      (reg proc)
      (reg argl))                                 ; complete eval of (> counter n)
    after-call10
    (restore env)
    (restore continue)
    (test (op false?) (reg val))
    (branch (label false-branch6))
    true-branch5
    (assign
      val
      (op lookup-variable-value)
      (const product)
      (reg env))                                  ; if true, return product, computation ends.
    (goto (reg continue))
    false-branch6                                 ; else, false6
    (assign
      proc
      (op lookup-variable-value)
      (const iter)
      (reg env))                                  ; setup for iterative call of iter
    (save continue)                               ; 1st level save continue use stack space
    (save proc)                                   ; save proc use stack space
    (save env)
    (assign
      proc
      (op lookup-variable-value)
      (const +)
      (reg env))                                  ; setup eval 2nd arg of iter
    (assign val (const 1))
    (assign argl (op list) (reg val))
    (assign
      val
      (op lookup-variable-value)
      (const counter)
      (reg env))
    (assign argl (op cons) (reg val) (reg argl))
    (test (op primitive-procedure?) (reg proc))
    (branch (label primitive-branch14))
    compiled-branch15
    (assign continue (label after-call16))
    (assign
      val
      (op compiled-procedure-entry)
      (reg proc))
    (goto (reg val))
    primitive-branch14
    (assign
      val
      (op apply-primitive-procedure)
      (reg proc)
      (reg argl))
    after-call16
    (assign argl (op list) (reg val))
    (restore env)
    (save argl)
    (assign
      proc
      (op lookup-variable-value)
      (const *)
      (reg env))                                  ; setup eval 1st arg of iter
    (assign
      val
      (op lookup-variable-value)
      (const product)
      (reg env))
    (assign argl (op list) (reg val))
    (assign
      val
      (op lookup-variable-value)
      (const counter)
      (reg env))
    (assign argl (op cons) (reg val) (reg argl))
    (test (op primitive-procedure?) (reg proc))
    (branch (label primitive-branch11))
    compiled-branch12
    (assign continue (label after-call13))
    (assign
      val
      (op compiled-procedure-entry)
      (reg proc))
    (goto (reg val))
    primitive-branch11
    (assign
      val
      (op apply-primitive-procedure)
      (reg proc)
      (reg argl))
    after-call13
    (restore argl)
    (assign argl (op cons) (reg val) (reg argl))
    (restore proc)                                ; restore iter - stack depth for proc is 0 at this point
    (restore continue)
    (test (op primitive-procedure?) (reg proc))   ; compiled proc
    (branch (label primitive-branch17))
    compiled-branch18
    (assign
      val
      (op compiled-procedure-entry)
      (reg proc))
    (goto (reg val))                              ; go to iter, label entry3. There's no save before entry3 which means that there's a constant stack usage with the iterative process. 
    primitive-branch17
    (assign
      val
      (op apply-primitive-procedure)
      (reg proc)
      (reg argl))
    (goto (reg continue))
    after-call19
    after-if7
    after-lambda4
    (perform
      (op define-variable!)
      (const iter)
      (reg val)
      (reg env))
    (assign val (const ok))
    (assign
      proc
      (op lookup-variable-value)
      (const iter)
      (reg env))                                  ; setup for eval (iter 1 1)
    (assign val (const 1))
    (assign argl (op list) (reg val))
    (assign val (const 1))
    (assign argl (op cons) (reg val) (reg argl))
    (test (op primitive-procedure?) (reg proc))   ; compiled
    (branch (label primitive-branch20))
    compiled-branch21
    (assign
      val
      (op compiled-procedure-entry)
      (reg proc))
    (goto (reg val))                              ; go to iter, label entry 3
    primitive-branch20
    (assign
      val
      (op apply-primitive-procedure)
      (reg proc)
      (reg argl))
    (goto (reg continue))
    after-call22
    after-lambda2
    (perform
      (op define-variable!)
      (const factorial)
      (reg val)
      (reg env))
    (assign val (const ok))))
#+end_example


* factorial
#+begin_src scheme :results output verbatim :exports both
  (pretty-print
   (compile
    '(define (factorial n)
       (if (= n 1)
           1
           (* (factorial (- n 1)) n)))
    'val 'next))
#+end_src

#+RESULTS:
#+BEGIN_EXAMPLE
  ((env)
   (val)
   ((assign
      val
      (op make-compiled-procedure)
      (label entry1)
      (reg env)) ; (define (factorial n)
    (goto (label after-lambda2))
    entry1
    (assign
      env
      (op compiled-procedure-env)
      (reg proc))
    (assign
      env
      (op extend-environment)
      (const (n))
      (reg argl)
      (reg env))
    (save continue)
    (save env)
    (assign
      proc
      (op lookup-variable-value)
      (const =)
      (reg env)) ; setting up for (= n 1))
    (assign val (const 1))
    (assign argl (op list) (reg val))
    (assign
      val
      (op lookup-variable-value)
      (const n)
      (reg env))
    (assign argl (op cons) (reg val) (reg argl))
    (test (op primitive-procedure?) (reg proc))
    (branch (label primitive-branch6))
    compiled-branch7
    (assign continue (label after-call8))
    (assign
      val
      (op compiled-procedure-entry)
      (reg proc))
    (goto (reg val))
    primitive-branch6
    (assign
      val
      (op apply-primitive-procedure)
      (reg proc)
      (reg argl))                                 ; eval (= n 1)
    after-call8
    (restore env)
    (restore continue)
    (test (op false?) (reg val))
    (branch (label false-branch4))
    true-branch3
    (assign val (const 1))                        ; return 1
    (goto (reg continue))
    false-branch4
    (assign
      proc
      (op lookup-variable-value)
      (const *)
      (reg env))                                  ; recursive call (* (factorial ...
    (save continue)
    (save proc)                                   ; 1st level proc saveusing stack space for *
    (assign
      val
      (op lookup-variable-value)
      (const n)
      (reg env))
    (assign argl (op list) (reg val))
    (save argl)
    (assign
      proc
      (op lookup-variable-value)
      (const factorial)
      (reg env))                                  ; setup for eval factorial
    (save proc)                                   ; nested proc save for factorial
    (assign
      proc
      (op lookup-variable-value)
      (const -)
      (reg env))                                  ; setup for eval (- n 1)
    (assign val (const 1))
    (assign argl (op list) (reg val))
    (assign
      val
      (op lookup-variable-value)
      (const n)
      (reg env))
    (assign argl (op cons) (reg val) (reg argl))
    (test (op primitive-procedure?) (reg proc))
    (branch (label primitive-branch9))
    compiled-branch10
    (assign continue (label after-call11))
    (assign
      val
      (op compiled-procedure-entry)
      (reg proc))
    (goto (reg val))
    primitive-branch9
    (assign
      val
      (op apply-primitive-procedure)
      (reg proc)
      (reg argl))                                 ; eval (- n 1)
    after-call11
    (assign argl (op list) (reg val))
    (restore proc)                                ; restore factorial
    (test (op primitive-procedure?) (reg proc))   ; go to compiled
    (branch (label primitive-branch12))
    compiled-branch13
    (assign continue (label after-call14))        ; when done with factorial, go to after-call14
    (assign
      val
      (op compiled-procedure-entry)
      (reg proc))
    (goto (reg val))                              ; go to factorial, label entry1. This is where stack space builds up since it can continue to go to entry1 saving more proc, continue and env
    primitive-branch12
    (assign
      val
      (op apply-primitive-procedure)
      (reg proc)
      (reg argl))
    after-call14
    (restore argl)                                ; contains right most n
    (assign argl (op cons) (reg val) (reg argl))  ; cons value of computed factorial on n
    (restore proc)                                ; pop stack to get *
    (restore continue)                            ; pop stack
    (test (op primitive-procedure?) (reg proc))
    (branch (label primitive-branch15))           ; go to primitive
    compiled-branch16
    (assign
      val
      (op compiled-procedure-entry)
      (reg proc))
    (goto (reg val))
    primitive-branch15
    (assign
      val
      (op apply-primitive-procedure)
      (reg proc)
      (reg argl))                                 ; actually compute (* (factorial ...
    (goto (reg continue))                         ; return from call
    after-call17
    after-if5
    after-lambda2
    (perform
      (op define-variable!)
      (const factorial)
      (reg val)
      (reg env))
    (assign val (const ok))))
  v
#+END_EXAMPLE

* Annotate the resulting code, showing the essential difference between the code for iterative and recursive versions of ~factorial~ that makes one process build up stack space and the other run in constant stack space.

See the annotated compiled procedures for recursive and iterative factorial above.
