#+Title: Exercise 5.35

**** What expression was compiled to produce the code shown in *Note [[Figure:5-18]]?

#+NAME: Figure:5-18
#+begin_src scheme :eval no
  (assign val (op make-compiled-procedure) (label entry16) (reg env))
  (goto (label after-lambda15))
  entry16
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env
          (op extend-environment) (const (x)) (reg argl) (reg env)) ; procedure f taking argument x
  (assign proc (op lookup-variable-value) (const +) (reg env))      ; first line of procedure f is a call to + 
  (save continue)
  (save proc)                                                       ; save +
  (save env)
  (assign proc (op lookup-variable-value) (const g) (reg env))      ; last argument of + is a call to procedure g
  (save proc)                                                       ; save g
  (assign proc (op lookup-variable-value) (const +) (reg env))      ; (+ x 2)
  (assign val (const 2))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const x) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))                       ; + is primitive
  (branch (label primitive-branch19))
  compiled-branch18
  (assign continue (label after-call17))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
  primitive-branch19
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  after-call17
  (assign argl (op list) (reg val))
  (restore proc)                                                    ; restore g
  (test (op primitive-procedure?) (reg proc))                       ; compiled proc g
  (branch (label primitive-branch22))
  compiled-branch21
  (assign continue (label after-call20))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
  primitive-branch22
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))

  after-call20
  (assign argl (op list) (reg val))                                 ; argl now has value of (g (+ x 2))
  (restore env)
  (assign val (op lookup-variable-value) (const x) (reg env))       ; val has x
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)                                                    ; restore +
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch25))
  compiled-branch24
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
  primitive-branch25
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl)) ; (+ x (g (+ x 2)))
  (goto (reg continue))
  after-call23
  after-lambda15
  (perform (op define-variable!) (const f) (reg val) (reg env))
  (assign val (const ok))
#+end_src

The expression compiled above is
#+begin_src scheme :eval no
  (define (f x)
    (+ x (g (+ x 2))))
#+end_src
